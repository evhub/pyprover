# Imports:

from pyprover.logic import (
    Proposition,
    Constant,
    Implies,
    wff,
    bot,
)

# Functions:

def props(names) =
    """Constructs propositions from a space-seperated string of names."""
    map(Proposition, names.split())

def terms(names) =
    """Constructs constants from a space-seperated string of names."""
    map(Constant, names.split())

def prop_simp(expr, **kwargs) =
    """Simplify the propositional parts of expr."""
    expr.simplify(prenex_exists=False, prenex_foralls=False, **kwargs)

def prenex(expr, **kwargs) =
    """Convert expr to prenex normal form."""
    expr.simplify(prenex_exists=True, prenex_foralls=False, **kwargs).simplify(prenex_exists=True, prenex_foralls=True, **kwargs)
strict_prenex = prenex$(nonempty_universe=False)

def cnf(expr, **kwargs) =
    """Converts an expression to CNF."""
    prenex(expr, dnf=False, **kwargs)
strict_cnf = cnf$(nonempty_universe=False)

def dnf(expr, **kwargs) =
    """Converts an expression to DNF."""
    prenex(expr, dnf=True, **kwargs)
strict_dnf = dnf$(nonempty_universe=False)

def solve(expr, **kwargs) =
    """Converts to CNF and performs all possible resolutions."""
    expr |> cnf$(**kwargs) |> .resolve(**kwargs)
strict_solve = solve$(nonempty_universe=False)

def skolemize(expr, **kwargs) =
    """Converts to CNF and skolemizes all variables."""
    solve(expr, just_skolemize=True, **kwargs)
strict_skolemize = skolemize$(nonempty_universe=False)

def no_proof_of(givens, conclusion) =
    """Finds a formula that represents the givens not implying the conclusion."""
    if wff(givens):
        givens = (givens,)
    else:
        givens = tuple(givens)
    ~Implies(*(givens + (conclusion,)))

def proves(givens, conclusion, **kwargs) =
    """Determines if the givens prove the conclusion."""
    no_proof_of(givens, conclusion) |> solve$(**kwargs) == bot
strict_proves = proves$(nonempty_universe=False)

def iff(a, b) =
    """Creates a formula for a implies b and b implies a."""
    assert wff(a), a
    assert wff(b), b
    a >> b & b >> a

def proves_and_proved_by(a, b, **kwargs) =
    """Determines if a is true if and only if b."""
    a = cnf(a, **kwargs)
    b = cnf(b, **kwargs)
    a `proves$(**kwargs)` b and b `proves$(**kwargs)` a
strict_proves_and_proved_by = proves_and_proved_by$(nonempty_universe=False)

def simplify(expr, *exprs, **kwargs):
    """Simplify the given expression[s]."""
    if exprs:
        return (expr,) + exprs |> map$(dnf$(**kwargs)) |> tuple
    else:
        return dnf(expr, **kwargs)
strict_simplify = simplify$(nonempty_universe=False)

def simplest_form(expr, **kwargs):
    """Finds the shortest simplification for the given expression."""
    cnf_expr = cnf(expr, **kwargs)
    dnf_expr = dnf(expr, **kwargs)
    if len(cnf_expr) <= len(dnf_expr):
        return cnf_expr
    else:
        return dnf_expr
strict_simplest_form = simplest_form$(nonempty_universe=False)

def simplest_solution(expr, **kwargs) =
    """Finds the shortest resolved simplification for the given expression."""
    expr |> solve$(**kwargs) |> simplest_form$(**kwargs)
strict_simplest_solution = simplest_solution$(nonempty_universe=False)

def substitute(expr, subs, **kwargs) =
    """Substitutes expressions or booleans into the given expression."""
    expr.substitute(subs, **kwargs)
