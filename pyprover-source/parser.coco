# Imports:

from pyparsing import (
    Literal,
    ZeroOrMore,
    OneOrMore,
    Optional,
    oneOf,
    replaceWith,
    Regex,
    Forward,
    ParserElement,
    stringStart,
    stringEnd,
)

from pyprover.constants import (
    all_top_syms,
    all_bot_syms,
    all_not_syms,
    all_imp_syms,
    all_and_syms,
    all_or_syms,
    all_forall_syms,
    all_exists_syms,
)
from pyprover.logic import (
    top,
    bot,
    Proposition,
    Predicate,
    Constant,
    Function,
    Not,
    Implies,
    And,
    Or,
    Exists,
    ForAll,
    Eq,
)

ParserElement.enablePackrat()

oneOf = oneOf .. list

# Utilities:

def attach(action, item):
    """Attaches a parse action to an item."""
    return item.copy().addParseAction(action)

def call(action, item):
    """Call an action on the tokens in item."""
    def parse_action(o, l, tokens) =
        action(*tokens)
    return item |> attach$(parse_action)

def fixto(output, item):
    """Forces an item to result in a specific output."""
    return item |> attach$(replaceWith(output))

def tokenlist(sep, item):
    """Creates a list of tokens matching the item."""
    return item + ZeroOrMore(sep + item) + Optional(sep)

def parse(grammar, text):
    """Parses text using grammar."""
    return grammar.parseWithTabs().parseString(text)

# Grammar:

match def exists_handle(const, expr) = Exists(const, expr)

@addpattern(exists_handle)
match def exists_handle(const, prop, expr) =
    Exists(const, prop(const) & expr)

match def forall_handle(const, expr) = ForAll(const, expr)

@addpattern(forall_handle)
match def forall_handle(const, prop, expr) =
    ForAll(const, prop(const) >> expr)

class Grammar:

    lparen = Literal("(").suppress()
    rparen = Literal(")").suppress()
    comma = Literal(",").suppress()
    dot = Literal(".").suppress()
    equals = Literal("=").suppress()
    colon = Literal(":").suppress()

    commalist = tokenlist$(comma)

    not_op = oneOf(all_not_syms).suppress()
    imp_op = oneOf(all_imp_syms).suppress()
    and_op = oneOf(all_and_syms).suppress()
    or_op = oneOf(all_or_syms).suppress()
    forall_op = oneOf(all_forall_syms).suppress()
    exists_op = oneOf(all_exists_syms).suppress()

    top_lit = oneOf(all_top_syms) |> fixto$(top)
    bot_lit = oneOf(all_bot_syms) |> fixto$(bot)

    lowercase_name = Regex("[a-z0-9_]\w*")
    uppercase_name = Regex("[A-Z]\w*")

    var = lowercase_name |> call$(Constant)
    func = Forward()
    term = func | var
    terms = lparen - commalist(term) - rparen
    func <<= lowercase_name + terms |> call$(Function)

    prop = uppercase_name |> call$(Proposition)
    pred = uppercase_name + terms |> call$(Predicate)
    equality = term + equals + term |> call$(Eq)
    atom = pred | prop | equality

    expr = Forward()
    quant_sep = dot | comma
    exists = (
        exists_op + var + Optional(colon + prop) + quant_sep + expr
        |> call$(exists_handle)
    )
    forall = (
        forall_op + var + Optional(colon + prop) + quant_sep + expr
        |> call$(forall_handle)
    )
    quant = exists | forall

    base_expr = top_lit | bot_lit | quant | atom | lparen - expr - rparen
    not_expr = quant | (not_op + base_expr |> call$(Not)) | base_expr | quant
    and_expr = quant | (not_expr + OneOrMore(and_op - not_expr) |> call$(And)) | not_expr
    or_expr = quant | (and_expr + OneOrMore(or_op - and_expr) |> call$(Or)) | and_expr
    expr <<= quant | (or_expr + OneOrMore(imp_op - or_expr) |> call$(Implies)) | or_expr

    formula = stringStart + expr + stringEnd

for varname, val in vars(Grammar).items():
    if isinstance(val, ParserElement):
        setattr(Grammar, varname, val.setName(varname))

# Endpoint:

def expr(formula):
    """Parses the given formula into an expression."""
    result = parse(Grammar.formula, formula)
    assert len(result) == 1, results
    return result[0]
