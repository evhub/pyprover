# Imports:

from pyprover.logic import (
    FA,
    TE,
    top,
    bot,
    And,
    Or,
    Eq,
)
from pyprover.tools import (
    proves,
    proves_and_proved_by,
    simplify,
    simplest_form,
    substitute,
    strict_simplify,
    strict_proves,
)
from pyprover.atoms import (
    LowercasePropositions,
    StandardMath,
)
from pyprover.parser import expr

# Tests:

def test_propositional_logic():
    """Runs propositional logic tests."""
    with LowercasePropositions.using(globals()):

        # constructive theorems
        assert e&f `proves` e
        assert e&f `proves` f
        assert (e>>f, f>>g, e) `proves` g
        assert (e>>(f>>g), e>>f, e) `proves` g
        assert (e>>f, f>>g) `proves` e>>g
        assert e>>(f>>g) `proves` f>>(e>>g)
        assert e>>(f>>g) `proves` (e>>f)>>(e>>g)
        assert e `proves` f>>e
        assert top `proves` e>>(f>>e)
        assert e>>(f&g) `proves` (e>>f)&(e>>g)
        assert e>>(f>>g) `proves` (e&f)>>g
        assert (e&f)>>g `proves` e>>(f>>g)
        assert (e>>f)>>g `proves` (e&f)>>g
        assert e&(f>>g) `proves` (e>>f)>>g
        assert e `proves` e|f
        assert f `proves` e|f
        assert e|f `proves` f|e
        assert f>>g `proves` (e|f)>>(e|g)
        assert e `proves` e|e
        assert e `proves` ~~e
        assert ~e `proves` e>>f
        assert e>>f `proves` ~f>>~e
        assert e|f `proves` ~(~e&~f)
        assert e&f `proves` ~(~e|~f)
        assert ~(e|f) `proves` ~e&~f
        assert ~e&~f `proves` ~(e|f)
        assert ~e|~f `proves` ~(e&f)
        assert top `proves` ~(e&~e)
        assert e&~e `proves` f
        assert ~f `proves` f>>g
        assert (f>>g, ~f>>g) `proves` g
        assert g `proves` f>>g
        assert (f, ~(f&g)) `proves` ~g
        assert (p>>r, p>>~r) `proves` ~p
        assert top `proves` (p>>~p)>>~p
        assert bot `proves` a
        assert bot `proves` top
        assert a `proves` top

        # classical theorems
        assert ~~e `proves` e
        assert top `proves` e|~e
        assert top `proves` ((e>>f)>>e)>>e
        assert ~f>>~e `proves` e>>f
        assert ~(~e&~f) `proves` e|f
        assert ~(~e|~f) `proves` e&f
        assert ~(e&f) `proves` ~e|~f
        assert top `proves` (e>>f)|(f>>e)
        assert top `proves` (~~a|a)>>a
        assert p>>r `proves` (f>>r)|(p>>g)
        assert ~(f>>g) `proves` f&~g
        assert top `proves` (~f>>bot)>>f
        assert f>>g `proves` ~f|g
        assert top `proves` r&s|(~r|~s)
        assert f>>g `proves` g|~f
        assert (a&b)>>~c `proves` ~a|~b|~c
        assert f>>(g>>h) `proves` ~f|~g|h

        # other theorems
        assert t&(t>>d)|~t&~(t>>d) `proves` d
        assert (f>>g, c>>d) `proves` (f|c)>>(g|d)
        assert (f>>g)>>h `proves` f>>(g>>h)
        assert top `proves` p>>(s>>p)
        assert ~f|(f>>g) `proves` ~f|g
        assert (~f, g>>f) `proves` ~g
        assert (p>>s, r>>t, ~s|~t) `proves` ~p|~r
        assert top `proves` ~~(f|~f)
        assert top `proves` ~~(~~f>>f)
        assert (p|r, ~p) `proves` r
        assert (f|g, ~f) `proves` g
        assert (t|~a, ~a|~t) `proves` ~a
        assert top `proves` ~~((~f>>bot)>>f)
        assert (s&h|~s&~h)&~(s&h)|(s&~h|~s&h)&(s&h) `proves` ~s&~h
        assert ~a|~b|~c `proves` (a&b)>>~c
        assert ~p `proves` p>>bot
        assert (a|b, ~a|c) `proves` b|c
        assert top `proves` (f&g)>>g
        assert (p>>s, r>>t, p|r) `proves` s|t
        assert top `proves` ~p>>(p>>s)
        assert f>>g `proves` ((f&g)>>f)|(f>>(f&g))
        assert (f|~f)>>g `proves` ~~g
        assert p>>r `proves` p>>(p&r)
        assert (s&h|~s&~h)&(h|s)|(s&~h|~s&h)&~(h|s) `proves` s&h
        assert ~(f>>g) `proves` g>>f
        assert (f>>g)&(f>>h) `proves` f>>(g&h)
        assert (s&h|~s&~h)&(~s&~h)|(s&~h|~s&h)&~(~s&~h) `proves` ~(s&h)
        assert top `proves` (p>>(s>>e))>>((p>>s)>>(p>>e))
        assert top `proves` p>>p
        assert ~f `proves` ~(f&g)
        assert f>>~f `proves` ~f
        assert f>>g `proves` ~g>>~f
        assert (f&g)>>f
        assert (f>>(t&a|~t&~a), t&~f|~t&f, g>>(t&~a|~t&a), t&g|~t&~g) `proves` ~a
        assert t&(~t&~a)|~t&~(~t&~a) `proves` a
        assert ~f|~g|h `proves` f>>(g>>h)

        # invalid theorems
        assert not e>>(f>>g) `proves` (e>>f)>>g
        assert not (e&f)>>g `proves` (e>>f)>>g
        assert not (e>>f)>>g `proves` e&(f>>g)
        assert not e `proves` e&f
        assert not e|f `proves` e&f
        assert not e|top `proves` e
        assert not e `proves` e&bot
        assert not top `proves` bot

        # other tests
        assert And() == top
        assert Or() == bot
        assert () `proves` top
        assert (a^b, a) `proves` ~b
        assert f>>(g>>h) `proves_and_proved_by` (f&g)>>h
        assert bot `proves_and_proved_by` a&~a
        assert top `proves_and_proved_by` a|~a
        assert top & bot |> simplify == bot
        assert simplify(a&a, b&b) == (a, b)
        assert a^b |> simplest_form == (b|a)&(~a|~b)
        assert (s&h|~s&~h)&~(s&h)|(s&~h|~s&h)&(s&h) |> simplest_form == ~s&~h
        assert a^b `substitute` {a:True, b:False} |> simplify == top
        assert a^b `substitute` {a:top, b:top} |> simplify == bot
        assert e << f == f >> e

def test_predicate_logic():
    """Runs predicate logic tests."""
    with StandardMath.using(globals()):

        # basic tests
        assert FA(x, F) |> simplify == F
        assert TE(x, F) |> simplify == F
        assert FA(x, F(x)) & G |> simplify == FA(y, F(y) & G)
        assert FA(x, F(x)) | G |> simplify == FA(y, F(y) | G)
        assert TE(x, F(x)) & G |> simplify == TE(y, F(y) & G)
        assert TE(x, F(x)) | G |> simplify == TE(y, F(y) | G)
        assert FA(x, F(f(x))) == FA(y, F(f(y)))
        assert TE(x, F(f(x))) == TE(y, F(f(y)))
        assert TE(f, F(f(x))) == TE(g, F(g(x)))

        # constructive theorems
        assert TE(x, bot) `proves` bot
        assert top `proves` FA(x, top)
        assert FA(x, R(x) >> S(x)) `proves` FA(y, R(y)) >> FA(z, S(z))
        assert FA(x, R(x) & S(x)) `proves` FA(y, R(y)) & FA(z, S(z))
        assert (FA(x, R(x) >> S(x)), TE(y, R(y))) `proves` TE(z, S(z))
        assert TE(x, R(x) & S(x)) `proves` TE(y, R(y)) & TE(z, S(z))
        assert TE(x, R(x)) | TE(y, S(y)) `proves` TE(z, R(z) | S(z))
        assert TE(x, R(x) | S(x)) `proves` TE(y, R(y)) | TE(z, S(z))
        assert FA(x, R(x)) `proves` ~TE(y, ~R(y))
        assert TE(x, ~R(x)) `proves` ~FA(y, R(y))
        assert FA(x, ~R(x)) `proves` ~TE(y, R(y))
        assert ~TE(x, R(x)) `proves` FA(y, ~R(y))
        assert R(j) `proves` TE(x, R(x))

        # classical theorems
        assert ~TE(x, ~R(x)) `proves` FA(y, R(y))
        assert ~FA(x, ~R(x)) `proves` TE(y, R(y))
        assert ~FA(x, R(x)) `proves` TE(y, ~R(y))
        assert FA(x, ~~D(x)) `proves` FA(x, D(x))
        assert ~TE(x, R(x)) `proves` FA(y, ~R(y))
        assert top `proves` TE(x, D(x)) | FA(x, ~D(x))
        assert top `proves` TE(x, ~D(x)) | FA(x, D(x))
        assert TE(x, top) `proves` TE(x, D(x) >> FA(y, D(y)))
        assert TE(x, ~~D(x)) `proves` TE(x, D(x))
        assert FA(x, C(x) | D(x)) `proves` FA(x, C(x)) | TE(x, D(x))

        # other theorems
        assert FA(x, H(j) >> T(x)) `proves` H(j) >> FA(x, T(x))
        assert TE(x, R(x) >> B(x)) `proves` FA(x, R(x)) >> TE(x, B(x))
        assert ~FA(x, bot) `proves` TE(x, top)
        assert FA(x, TE(y, F(y) | G(x))) `proves` FA(x, G(x) | TE(x, F(x)))
        assert (FA(x, FA(y, FA(z, (S(x, y) & S(y, z)) >> S(x, z)))), ~TE(x, S(x, x))) `proves` FA(x, FA(y, S(x, y) >> ~S(y, x)))
        assert FA(x, G(x)) | FA(x, B(x)) `proves` FA(x, G(x) | B(x))
        assert TE(z, FA(k, P(z, k))) `proves` FA(y, TE(x, P(x, y)))
        assert TE(x, C(x) & B(x)) `proves` TE(x, B(x) & C(x))
        assert TE(x, C(x, i) & B(x, j)) `proves` TE(x, C(x, i) >> B(x, j))
        assert FA(x, C(x) & B(x)) `proves` FA(x, B(x) & C(x))
        assert FA(x, C(x) & B(x)) `proves` FA(x, C(x)) & FA(x, B(x))
        assert FA(x, bot) `proves` ~TE(x, top)
        assert (~TE(x, G(x)) | FA(x, F(x)), C(j) >> FA(x, D(x))) `proves` FA(y, FA(z, ~G(z) | F(y) & C(j) >> D(y)))
        assert FA(x, G(x)) | TE(x, F(x)) `proves` FA(x, TE(y, F(y) | G(x)))
        assert (P | TE(x, W)) >> FA(z, R) `proves` FA(z, FA(x, (P | W) >> R))
        assert (TE(x, ~F(x)), FA(x, F(x))) `proves` bot
        assert (FA(x, ~F(x)), FA(x, F(x))) `proves` FA(x, bot)
        assert TE(x, F(x)) | TE(x, G(x)) `proves` TE(x, TE(y, F(x) | G(y)))
        assert TE(x, FA(y, P(x, y))) `proves` FA(y, TE(x, P(x, y)))
        assert TE(x, FA(y, bot)) `proves` bot
        assert top `proves` FA(x, TE(y, top))
        assert FA(x, TE(y, F(y)) | G(x)) `proves` FA(x, TE(y, F(y) | G(x)))
        assert TE(x, FA(y, F(y) & G(x))) `proves` TE(x, FA(y, F(y)) & G(x))
        assert TE(x, ~R(x)) `proves` TE(y, R(y) >> (R(j) & R(k)))
        assert P(c) `proves` TE(x, P(x))
        assert P(c) `proves` TE(x, top)
        assert P(c) & ~P(c) `proves` TE(x, top)
        assert P(c) | ~P(c) `proves` TE(x, top)

        # invalid theorems
        assert not FA(x, R(x)) >> FA(y, S(y)) `proves` FA(z, R(z) >> S(z))
        assert not TE(x, R(x)) & TE(y, S(y)) `proves` TE(z, R(z) & S(z))
        assert not TE(x, R(x)) `proves` FA(y, R(y))

        # non-empty universe theorems
        assert top `proves` TE(x, top)
        assert top `proves` TE(x, D(x) >> FA(y, D(y)))
        assert (R(j), FA(x, R(x) >> S(x))) `proves` S(j)
        assert FA(x, R(x)) >> FA(y, S(y)) `proves` TE(x, FA(y, ~R(x) | S(y)))
        assert FA(x, R(x)) `proves` TE(y, R(y))
        assert (T(i), FA(x, T(x) >> T(s(x)))) `proves` T(s(i))
        assert top `proves` TE(x, R(x) >> (R(j) & R(k)))
        assert (FA(x, ~F(x)), FA(x, F(x))) `proves` bot

        # equality theorems
        assert top `proves` Eq(a, a)
        assert Eq(a, b) & Eq(b, c) `proves` Eq(a, c)
        assert Eq(a, b) & Eq(b, c) `proves` Eq(c, a)
        assert Eq(a, b) & F(a) `proves` F(b)
        assert (Eq(a, b) | Eq(a, c), F(a)) `proves` F(b) | F(c)
        assert FA(x, Eq(a, x)) `proves` Eq(a, b)
        assert Eq(a, b) `proves` Eq(b, a)
        assert Eq(a, b) `proves` Eq(f(a), f(b))

def test_empty_universe():
    """Runs predicate logic tests in a potentially empty universe."""
    with StandardMath.using(globals()):

        # basic tests
        assert FA(x, F) |> strict_simplify != F
        assert TE(x, F) |> strict_simplify != F
        assert FA(x, F(x)) & G |> strict_simplify != FA(y, F(y) & G)
        assert FA(x, F(x)) | G |> strict_simplify == FA(y, F(y) | G)
        assert TE(x, F(x)) & G |> strict_simplify == TE(y, F(y) & G)
        assert TE(x, F(x)) | G |> strict_simplify != TE(y, F(y) | G)

        # constructive theorems
        assert TE(x, bot) `strict_proves` bot
        assert top `strict_proves` FA(x, top)
        assert FA(x, R(x) >> S(x)) `strict_proves` FA(y, R(y)) >> FA(z, S(z))
        assert FA(x, R(x) & S(x)) `strict_proves` FA(y, R(y)) & FA(z, S(z))
        assert (FA(x, R(x) >> S(x)), TE(y, R(y))) `strict_proves` TE(z, S(z))
        assert TE(x, R(x) & S(x)) `strict_proves` TE(y, R(y)) & TE(z, S(z))
        assert TE(x, R(x)) | TE(y, S(y)) `strict_proves` TE(z, R(z) | S(z))
        assert TE(x, R(x) | S(x)) `strict_proves` TE(y, R(y)) | TE(z, S(z))
        assert FA(x, R(x)) `strict_proves` ~TE(y, ~R(y))
        assert TE(x, ~R(x)) `strict_proves` ~FA(y, R(y))
        assert FA(x, ~R(x)) `strict_proves` ~TE(y, R(y))
        assert ~TE(x, R(x)) `strict_proves` FA(y, ~R(y))
        assert R(j) `strict_proves` TE(x, R(x))

        # classical theorems
        assert ~TE(x, ~R(x)) `strict_proves` FA(y, R(y))
        assert ~FA(x, ~R(x)) `strict_proves` TE(y, R(y))
        assert ~FA(x, R(x)) `strict_proves` TE(y, ~R(y))
        assert FA(x, ~~D(x)) `strict_proves` FA(x, D(x))
        assert ~TE(x, R(x)) `strict_proves` FA(y, ~R(y))
        assert top `strict_proves` TE(x, D(x)) | FA(x, ~D(x))
        assert top `strict_proves` TE(x, ~D(x)) | FA(x, D(x))
        assert TE(x, top) `strict_proves` TE(x, D(x) >> FA(y, D(y)))
        assert TE(x, ~~D(x)) `strict_proves` TE(x, D(x))
        assert FA(x, C(x) | D(x)) `strict_proves` FA(x, C(x)) | TE(x, D(x))

        # other theorems
        assert FA(x, H(j) >> T(x)) `strict_proves` H(j) >> FA(x, T(x))
        assert TE(x, R(x) >> B(x)) `strict_proves` FA(x, R(x)) >> TE(x, B(x))
        assert ~FA(x, bot) `strict_proves` TE(x, top)
        assert FA(x, TE(y, F(y) | G(x))) `strict_proves` FA(x, G(x) | TE(x, F(x)))
        assert (FA(x, FA(y, FA(z, (S(x, y) & S(y, z)) >> S(x, z)))), ~TE(x, S(x, x))) `strict_proves` FA(x, FA(y, S(x, y) >> ~S(y, x)))
        assert FA(x, G(x)) | FA(x, B(x)) `strict_proves` FA(x, G(x) | B(x))
        assert TE(z, FA(k, P(z, k))) `strict_proves` FA(y, TE(x, P(x, y)))
        assert TE(x, C(x) & B(x)) `strict_proves` TE(x, B(x) & C(x))
        assert TE(x, C(x, i) & B(x, j)) `strict_proves` TE(x, C(x, i) >> B(x, j))
        assert FA(x, C(x) & B(x)) `strict_proves` FA(x, B(x) & C(x))
        assert FA(x, C(x) & B(x)) `strict_proves` FA(x, C(x)) & FA(x, B(x))
        assert FA(x, bot) `strict_proves` ~TE(x, top)
        assert (~TE(x, G(x)) | FA(x, F(x)), C(j) >> FA(x, D(x))) `strict_proves` FA(y, FA(z, ~G(z) | F(y) & C(j) >> D(y)))
        assert FA(x, G(x)) | TE(x, F(x)) `strict_proves` FA(x, TE(y, F(y) | G(x)))
        assert (P | TE(x, W)) >> FA(z, R) `strict_proves` FA(z, FA(x, (P | W) >> R))
        assert TE(x, F(x)) | TE(x, G(x)) `proves` TE(x, TE(y, F(x) | G(y)))
        assert TE(x, FA(y, P(x, y))) `proves` FA(y, TE(x, P(x, y)))
        assert TE(x, FA(y, bot)) `proves` bot
        assert top `proves` FA(x, TE(y, top))
        assert FA(x, TE(y, F(y)) | G(x)) `proves` FA(x, TE(y, F(y) | G(x)))
        assert TE(x, FA(y, F(y) & G(x))) `proves` TE(x, FA(y, F(y)) & G(x))
        assert TE(x, ~R(x)) `strict_proves` TE(y, R(y) >> (R(j) & R(k)))
        assert P(c) `strict_proves` TE(x, P(x))
        assert P(c) `strict_proves` TE(x, top)
        assert P(c) & ~P(c) `strict_proves` TE(x, top)
        assert P(c) | ~P(c) `strict_proves` TE(x, top)

        # invalid theorems
        assert not FA(x, R(x)) >> FA(y, S(y)) `strict_proves` FA(z, R(z) >> S(z))
        assert not TE(x, R(x)) & TE(y, S(y)) `strict_proves` TE(z, R(z) & S(z))
        assert not TE(x, R(x)) `strict_proves` FA(y, R(y))

        # non-empty universe theorems
        assert not top `strict_proves` TE(x, top)
        assert not top `strict_proves` TE(x, D(x) >> FA(y, D(y)))
        assert not (R(j), FA(x, R(x) >> S(x))) `strict_proves` S(j)
        assert not FA(x, R(x)) >> FA(y, S(y)) `strict_proves` TE(x, FA(y, ~R(x) | S(y)))
        assert not FA(x, R(x)) `strict_proves` TE(y, R(y))
        assert not (T(i), FA(x, T(x) >> T(s(x)))) `strict_proves` T(s(i))
        assert not top `strict_proves` TE(x, R(x) >> (R(j) & R(k)))
        assert not (FA(x, ~F(x)), FA(x, F(x))) `strict_proves` bot

        # equality theorems
        assert top `strict_proves` Eq(a, a)
        assert Eq(a, b) & Eq(b, c) `strict_proves` Eq(a, c)
        assert Eq(a, b) & Eq(b, c) `strict_proves` Eq(c, a)
        assert Eq(a, b) & F(a) `strict_proves` F(b)
        assert (Eq(a, b) | Eq(a, c), F(a)) `strict_proves` F(b) | F(c)
        assert FA(x, Eq(a, x)) `strict_proves` Eq(a, b)
        assert Eq(a, b) `strict_proves` Eq(b, a)
        assert Eq(a, b) `strict_proves` Eq(f(a), f(b))

def test_parser():
    """Tests math notation parsing."""
    with StandardMath.using(globals()):
        assert expr(r"A") == A
        assert expr(r"F(x)") == F(x)
        assert expr(r"F(f(x))") == F(f(x))
        assert expr(r"A x. F(x)") == FA(x, F(x))
        assert expr(r"A x. E y. F(x) \/ G(y)") == FA(x, TE(y, F(x) | G(y)))
        assert expr(r"F(i) /\ A x. G(x)") == F(i) & FA(x, G(x))
        assert expr(r"F -> G -> H") == F >> (G >> H)
        assert expr(r"~F(x)") == ~F(x)
        assert expr(r"-G(x) /\ F(x)") == ~G(x) & F(x)
        assert expr(r"A /\ (B \/ C)") == A & (B | C)
        assert expr(r"a = b") == Eq(a, b)
        assert expr(r"forall x: A, B(x)") == FA(x, A(x) >> B(x))
        assert expr(r"exists x: A, B(x)") == TE(x, A(x) & B(x))

if __name__ == "__main__":
    test_propositional_logic()
    test_predicate_logic()
    test_empty_universe()
    test_parser()
    print("<success>")
