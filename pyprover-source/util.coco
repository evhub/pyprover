# Imports:

from pyprover.constants import (
    imp_sym,
    and_sym,
    or_sym,
    forall_sym,
    exists_sym,
)

# Functions:

def unorderd_eq(list1, list2) =
    len(list1) == len(list2) and set(list1) == set(list2)

def quote(expr, in_quantifier=False):
    """Adds parentheses in the presence of Imp, And, Or, ForAll, and Exists."""
    expr_str = str(expr)
    if in_quantifier and (
        expr_str.startswith(forall_sym)
        or expr_str.startswith(exists_sym)):
        return expr_str
    elif (imp_sym in expr_str
        or and_sym in expr_str
        or or_sym in expr_str
        or forall_sym in expr_str
        or exists_sym in expr_str):
        return "(" + expr_str + ")"
    else:
        return expr_str

def log_simplification(old, new, debug=False, **kwargs):
    """If there was simplification done, displays a message."""
    if debug:
        old_str = str(old)
        new_str = str(new)
        if old_str != new_str:
            print(old_str, "=>", new_str)

def log_resolution(x, y, resolution, debug=False, **kwargs):
    """Display a message of a resolution that was performed."""
    if debug:
        print(x, "+", y, "=>", resolution)

def rem_var(var, subs) =
    """Deletes any substitutions of var in subs."""
    newsubs = subs.copy()
    try:
        del newsubs[var.constant()]
    except KeyError:
        pass
    try:
        del newsubs[var.variable()]
    except KeyError:
        pass
    newsubs

class Counter:
    def __init__(self, num=-1):
        self.num = num
    def inc(self):
        assert not self.done(), self.num
        self.num -= 1
    def done(self) =
        self.num == 0

def obj `sub_once` subs =
    """Performs one substitution of subs into obj."""
    obj.substitute(subs, counter=Counter(1))

def can_sub(kwargs):
    """Determines if the counter in kwargs allows for another sub."""
    match {"counter": counter, **_} in kwargs:
        return not counter.done()
    else:
        return True

def do_sub(kwargs):
    """Increments the counter in kwargs."""
    match {"counter": counter, **_} in kwargs:
        counter.inc()

def unify_elems(a, b, elems_getter, **kwargs):
    """Find the most general unifier of the elements in a and b."""
    subs = {}
    for i, x in enumerate(elems_getter(a)):
        y = elems_getter(b)[i]
        unif = x.find_unification(y, **kwargs)
        if unif is None:
            return None
        for var, sub in unif.items():
            match {=var: prev_sub, **_} in subs:
                mgu = prev_sub.find_unification(sub, **kwargs)
                if mgu is None:
                    return None
                elif mgu:
                    new_a = a.substitute(mgu, **kwargs)
                    new_b = b.substitute(mgu, **kwargs)
                    new_unif = new_a.find_unification(new_b, **kwargs)
                    if new_unif is None:
                        return None
                    mgu.update(new_unif)
                    return mgu
            else:
                subs[var] = sub
    return subs
