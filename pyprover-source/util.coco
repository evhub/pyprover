# Imports:

from pyprover.constants import (
    imp_sym,
    and_sym,
    or_sym,
    forall_sym,
    exists_sym,
)

# Functions:

def unorderd_eq(list1, list2):
    if len(list1) != len(list2):
        return False
    for x in list1:
        if x not in list2:
            return False
    return True

def quote(expr, in_quantifier=False):
    """Adds parentheses in the presence of Imp, And, Or, ForAll, and Exists."""
    expr_str = str(expr)
    if in_quantifier and (
        expr_str.startswith(forall_sym)
        or expr_str.startswith(exists_sym)):
        return expr_str
    elif (imp_sym in expr_str
        or and_sym in expr_str
        or or_sym in expr_str
        or forall_sym in expr_str
        or exists_sym in expr_str):
        return "(" + expr_str + ")"
    else:
        return expr_str

def log_simplification(old, new, debug=False, **kwargs):
    """If there was simplification done, displays a message."""
    if debug:
        old_str = str(old)
        new_str = str(new)
        if old_str != new_str:
            print(old_str, "=>", new_str)

def rem_var(var, subs) =
    """Deletes any substitutions of var in subs."""
    newsubs = subs.copy()
    try:
        del newsubs[var.constant()]
    except KeyError:
        pass
    try:
        del newsubs[var.variable()]
    except KeyError:
        pass
    newsubs

class counter:
    def __init__(self, num=-1):
        self.num = num
    def inc(self):
        assert not self.done(), self.num
        self.num -= 1
    def done(self) =
        self.num == 0

def obj `sub_once` subs =
    """Performs one substitution of subs into obj."""
    obj.substitute(subs, counter=counter(1))

def can_sub(kwargs):
    """Determines if the counter in kwargs allows for another sub."""
    try:
        return not kwargs["counter"].done()
    except KeyError:
        return True

def do_sub(kwargs):
    """Increments the counter in kwargs."""
    try:
        kwargs["counter"].inc()
    except KeyError:
        pass

def merge_dicts(dict1, dict2):
    """Merge dictionaries if there are no conflicts, otherwise None."""
    out = {}
    for key, val in dict1.items() :: dict2.items():
        if key not in out:
            out[key] = val
        elif out[key] != val:
            return None
    return out
